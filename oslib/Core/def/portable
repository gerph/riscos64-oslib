TITLE Portable;
AUTHOR "Jonathan Coxhead, jonathan@doves.demon.co.uk, 9 Jun 1995";

NEEDS OS;

CONST
   Portable_PortEconet = .Bits: 1,
   Portable_PortSerial = .Bits: 8,
   Portable_PortFDC    = .Bits: %100000000000000;

TYPE
   Portable_ControlFlags = .Bits;
CONST
   Portable_ControlEconetPowerEnabled       = Portable_ControlFlags: %1,
   Portable_ControlLCDPowerEnabled          = Portable_ControlFlags: %10,
   Portable_ControlExternalVideoEnabled     = Portable_ControlFlags: %100,
   Portable_ControlSerialEnabled            = Portable_ControlFlags: %1000,
   Portable_ControlDualPanelEnabled         = Portable_ControlFlags: %10000,
   Portable_ControlVideoClock               = Portable_ControlFlags: %110000,
   Portable_ControlVideoClockShift          = .Int: 5,
   Portable_ControlVideoClockExternal       = .Int: 0,
   Portable_ControlVideoClockDividedCrystal = .Int: 1,
   Portable_ControlVideoClockCrystal        = .Int: 2,
   Portable_ControlInvertVideoClock         = Portable_ControlFlags: %10000000,
   Portable_ControlBackLightEnabled         = Portable_ControlFlags: %100000000,
   Portable_ControlExtraDisplayLines        = Portable_ControlFlags: %1000000000,
   Portable_ControlExtraDualPanelDRAM       = Portable_ControlFlags: %10000000000,
   Portable_ControlSoundPowerEnabled        = Portable_ControlFlags: %100000000000,
   Portable_ControlPCMCIAEnabled            = Portable_ControlFlags: %1000000000000,
   Portable_ControlParallelEnabled          = Portable_ControlFlags: %10000000000000,
   Portable_ControlFDCEnabled               = Portable_ControlFlags: %100000000000000,
   Portable_ControlIDEEnabled               = Portable_ControlFlags: %1000000000000000,
   Portable_ControlLCDVideoInverted         = Portable_ControlFlags: %10000000000000000,
   Portable_ControlTrackerballEnabled       = Portable_ControlFlags: %100000000000000000,
   Portable_ControlMouseEnabled             = Portable_ControlFlags: %1000000000000000000;

TYPE
   Portable_BMUVariable = .Int;
CONST
   // From https://www.riscosopen.org/wiki/documentation/show/Battery%20Management%20Unit%20variables
   Portable_BMUVariableVersion         = Portable_BMUVariable: 0,
   Portable_BMUVariableNominalCharge   = Portable_BMUVariable: 1,
   Portable_BMUVariableMeasuredCharge  = Portable_BMUVariable: 2,
   Portable_BMUVariableUsedCharge      = Portable_BMUVariable: 3,
   Portable_BMUVariableUsableCharge    = Portable_BMUVariable: 4,
   Portable_BMUVariableChargeEstimate  = Portable_BMUVariable: 6,
   Portable_BMUVariableInstVoltage     = Portable_BMUVariable: 7,
   Portable_BMUVariableInstCurrent     = Portable_BMUVariable: 8,
   Portable_BMUVariableInstTemperature = Portable_BMUVariable: 9,
   Portable_BMUVariableFlags           = Portable_BMUVariable: 10,
   Portable_BMUVariableChargeRate      = Portable_BMUVariable: 11,

   Portable_BMUVariableBatteryTimeRemaining         = Portable_BMUVariable: 21,
   Portable_BMUVariableBatteryTimeMax               = Portable_BMUVariable: 22,
   Portable_BMUVariableBatteryPercentage            = Portable_BMUVariable: 23,
   Portable_BMUVariableBatteryChargeTimeRemaining   = Portable_BMUVariable: 24,
   Portable_BMUVariableChargeCount                  = Portable_BMUVariable: 25,
   Portable_BMUVariableSmoothedVoltage              = Portable_BMUVariable: 26,
   Portable_BMUVariableSmoothedCurrent              = Portable_BMUVariable: 27,
   Portable_BMUVariableSmoothedNominalCapacity      = Portable_BMUVariable: 28,
   Portable_BMUVariableSmoothedCompensatedCapacity  = Portable_BMUVariable: 29;

TYPE
   Portable_BMUFlags = .Bits;
CONST
   Portable_BMUAtThreshold3     = Portable_BMUFlags: %1,
   Portable_BMUBatteryCharged   = Portable_BMUFlags: %1,
   Portable_BMULidOpen          = Portable_BMUFlags: %10,
   Portable_BMUAtThreshold2     = Portable_BMUFlags: %100,
   Portable_BMUBatteryFlat      = Portable_BMUFlags: %100,
   Portable_BMUAtThreshold1     = Portable_BMUFlags: %1000,
   Portable_BMUBatteryLow       = Portable_BMUFlags: %1000,
   Portable_BMUChargingFault    = Portable_BMUFlags: %10000,
   Portable_BMUChargeStateKnown = Portable_BMUFlags: %100000,
   Portable_BMUBatteryPresent   = Portable_BMUFlags: %1000000,
   Portable_BMUChargerConnected = Portable_BMUFlags: %10000000,
   Portable_BMUBatteryCharging  = Portable_BMUFlags: %100000000,
   Portable_BMUBatteryFailing   = Portable_BMUFlags: %1000000000;

TYPE
   Portable_ProcessorSpeed = .Bits;
CONST
   Portable_SpeedFast = Portable_ProcessorSpeed: 0,
   Portable_SpeedSlow = Portable_ProcessorSpeed: 1;

TYPE
   Portable_BMUCommand = .Int;
CONST
   Portable_BMUPowerOff          = Portable_BMUCommand: 1,
   Portable_BMUSetAutostart      = Portable_BMUCommand: 4,
   Portable_BMUDisconnectCharger = Portable_BMUCommand: 5,
   Portable_BMUConnectCharger    = Portable_BMUCommand: 6,
   Portable_DisableBMUEvent      = Portable_BMUCommand: 7,
   Portable_EnableBMUEvent       = Portable_BMUCommand: 8;

SWI
   Portable_Speed =
   (  NUMBER &42FC0 "Controls the processor speed",
      ENTRY
      (  R0 = .Bits: eor_mask,
         R1 = .Bits: and_mask
      ),
      EXIT
      (  R0 = Portable_ProcessorSpeed: old_speed,
         R1 = Portable_ProcessorSpeed: new_speed
   )  ),

   Portable_Control =
   (  NUMBER &42FC1 "Controls various power control and miscellaneous bits",
      ENTRY
      (  R0 = .Bits: eor_mask,
         R1 = .Bits: and_mask
      ),
      EXIT
      (  R0 = Portable_ControlFlags: old_control,
         R1 = Portable_ControlFlags: new_control
   )  ),

   Portable_ReadBMUVariable =
   (  NUMBER &42FC2 "Reads Battery Management Unit variables",
      ENTRY
      (  R0 = Portable_BMUVariable: var
      ),
      EXIT
      (  R1! = .Int: value
   )  ),

   Portable_WriteBMUVariable =
   (  NUMBER &42FC3 "Writes Battery Management Unit variables",
      ENTRY
      (  R0 = Portable_BMUVariable: var,
         R1 = .Int: value
   )  ),

   Portable_CommandBMU =
   (  NUMBER &42FC4 "For internal use only",
      ABSENT
   );

TYPE
   Portable_Features = .Bits;

CONST
   Portable_SupportsSpeed = Portable_Features: %1,
   Portable_SupportsIdle  = Portable_Features: %10000,
   Portable_SupportsStop  = Portable_Features: %100000;

SWI
   Portable_ReadFeatures =
   (  NUMBER &42FC5 "Returns a bitmap of power save features",
      EXIT
      (  R1! = Portable_Features: features
   )  ),

   Portable_Idle =
   (  NUMBER &42FC6 "Places the system into idle mode"
   );

TYPE
   Portable_RestartType = .Int;
CONST
   Portable_RestartKeyboard = Portable_RestartType: 1,
   Portable_RestartClock    = Portable_RestartType: 2;

SWI
   Portable_Stop =
   (  NUMBER &42FC7 "Places the system into stop mode",
      EXIT
      (  R0! = Portable_RestartType: restart
   )  );

TYPE
   Portable_StatusFlags = .Bits;
CONST
   Portable_StatusDockStationPresent   = Portable_StatusFlags: %1,
   Portable_StatusFloppyConnected      = Portable_StatusFlags: %10,
   Portable_StatusTrackerballConnected = Portable_StatusFlags: %100,
   Portable_StatusLCDInUse             = Portable_StatusFlags: %1000;

SWI
   Portable_Status =
   (  NUMBER &42FC8 "Reads the status of the portable module",
      EXIT
      (  R0! = Portable_StatusFlags: flags
   )  );

TYPE
   Portable_State = .Int;
CONST
   Portable_PowerDown           = Portable_State: 0,
   Portable_PowerUp             = Portable_State: 1,
   Portable_PowerTidyUp         = Portable_State: 2,
   Portable_PowerAboutToFreeze  = Portable_State: 3,
   Portable_PowerAwakened       = Portable_State: 4,
   Portable_PowerWishesToFreeze = Portable_State: 5;

SWI
   // Extends OS_ServiceCall
   Service_Portable =
   (  NUMBER &30,
      ENTRY
      (  R1 # &8A "Power down or up",
         R2 = Portable_State: state,
         R3 = .Bits: ports
      ),
      EXIT
      (  R1! = .Bool: unclaimed,
         R3 = .Bits: ports_to_change
   )  );

SWI
   // Extends OS_GenerateEvent
   Event_PortableBMU =
   (  NUMBER &22,
      ENTRY
      (  R0 # 28 "Portable Battery Management Unit event",
         R1 = Portable_BMUFlags: flags
   )  )
